{"version":3,"sources":["components/Playlist/Playlist.component.tsx","components/Featured/Featured.component.tsx","utils/getUrl.util.ts","components/App/App.component.tsx","utils/generateSpotifyAuthUrl.util.ts","serviceWorker.ts","index.tsx","components/Featured/Featured.module.scss","components/Playlist/Playlist.module.scss"],"names":["Playlist","_ref","load","_useState","useState","_useState2","Object","slicedToArray","data","setData","useEffect","cancelled","asyncToGenerator","regenerator_default","a","mark","_callee","unfiltered","dataNew","wrap","_context","prev","next","sent","status","stop","react_default","createElement","className","classes","cover","style","backgroundImage","concat","images","url","backgroundColor","onClick","console","log","Featured","getFeatured","getPlaylist","featured","setFeatured","featuredNew","container","playlists","items","map","playlist","Playlist_component","key","id","href","getUrl","_x","_x2","_getUrl","apply","this","arguments","token","response","json","fetch","method","headers","abrupt","t0","App","setToken","timeoutId","params","qs","parse","window","location","hash","access_token","spotifyResponse","setTimeout","Number","expires_in","assign","client_id","redirect_uri","response_type","scopes","show_dialog","state","encodeURIComponent","join","generateSpotifyAuthUrl","process","clearTimeout","useCallback","_ref2","_callee2","_context2","Featured_component","Boolean","hostname","match","ReactDOM","render","App_component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.5bae6852.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport classes from \"./Playlist.module.scss\";\n\nimport { ISpotifyPlaylistFull } from \"interfaces/ISpotifyPlaylist.interface\";\nimport { ISpotifyError } from \"interfaces/ISpotifyError.interface\";\n\ninterface IProps {\n  load: () => Promise<ISpotifyPlaylistFull | ISpotifyError | null>;\n}\n\nconst Playlist: React.FC<IProps> = ({ load }: IProps) => {\n  const [data, setData] = useState<ISpotifyPlaylistFull | null>(null);\n\n  useEffect(() => {\n    let cancelled = false;\n    (async () => {\n      const unfiltered = await load();\n      if (unfiltered) {\n        if (!(unfiltered as ISpotifyError).status) {\n          const dataNew = unfiltered as ISpotifyPlaylistFull;\n          if (!cancelled) {\n            setData(dataNew);\n          }\n        }\n      }\n    })();\n    return () => {\n      cancelled = true;\n    };\n  }, [load]);\n\n  return (\n      <div\n        className={classes.cover}\n        style={\n          data\n            ? {\n                backgroundImage: `url(${data.images[0].url})`\n              }\n            : { backgroundColor: \"#494949\" }\n        }\n        onClick={() => console.log(data)}\n      />\n  );\n};\n\nexport default Playlist;\n","import React, { useState, useEffect } from \"react\";\n\nimport classes from \"./Featured.module.scss\";\nimport Playlist from \"components/Playlist/Playlist.component\";\n\nimport { ISpotifyFeatured } from \"interfaces/ISpotifyFeatured.interface\";\nimport { ISpotifyError } from \"interfaces/ISpotifyError.interface\";\nimport { ISpotifyPlaylistFull } from \"interfaces/ISpotifyPlaylist.interface\";\n\ninterface IProps {\n  getFeatured: () => Promise<ISpotifyFeatured | ISpotifyError | null>;\n  getPlaylist: (\n    url: string\n  ) => Promise<ISpotifyPlaylistFull | ISpotifyError | null>;\n}\n\nconst Featured: React.FC<IProps> = ({ getFeatured, getPlaylist }: IProps) => {\n  const [featured, setFeatured] = useState<ISpotifyFeatured | null>(null);\n\n  useEffect(() => {\n    let cancelled = false;\n    (async () => {\n      const unfiltered = await getFeatured();\n      if (unfiltered) {\n        if (!(unfiltered as ISpotifyError).status) {\n          const featuredNew = unfiltered as ISpotifyFeatured;\n          if (!cancelled) {\n            setFeatured(featuredNew);\n          }\n        }\n      }\n    })();\n    return () => {\n      cancelled = true;\n    };\n  }, [getFeatured]);\n  return (\n    <div className={classes.container}>\n      {(featured ? featured.playlists.items : []).map(playlist => (\n        <Playlist key={playlist.id} load={() => getPlaylist(playlist.href)} />\n      ))}\n    </div>\n  );\n};\n\nexport default Featured;\n","import { ISpotifyError } from \"interfaces/ISpotifyError.interface\";\n\nexport async function getUrl<T>(\n  url: string,\n  token: string\n): Promise<T | ISpotifyError | null> {\n  try {\n    const response = await fetch(url, {\n      method: \"GET\",\n      headers: [[\"Authorization\", `Bearer ${token}`]]\n    });\n    const json = await response.json();\n    return response.status === 200\n      ? (json as T)\n      : (json as ISpotifyError);\n  } catch (error) {\n    console.log(error);\n  }\n  return null;\n}\n","import React, { useState, useEffect, useCallback } from \"react\";\n\nimport qs from \"query-string\";\n\nimport Featured from \"components/Featured/Featured.component\";\n\nimport { ISpotifyTokenRequest } from \"interfaces/ISpotifyTokenRequest.interface\";\nimport { ISpotifyTokenResponse } from \"interfaces/ISpotifyTokenResponse.interface\";\nimport { ISpotifyFeatured } from \"interfaces/ISpotifyFeatured.interface\";\nimport { ISpotifyPlaylistFull } from \"interfaces/ISpotifyPlaylist.interface\";\n\nimport { generateSpotifyAuthUrl } from \"utils/generateSpotifyAuthUrl.util\";\nimport { getUrl } from \"utils/getUrl.util\";\n\n// import classes from \"./App.module.scss\";\n\ntype Token = string | null;\n\nconst App: React.FC = () => {\n  const [token, setToken] = useState<Token>(null);\n\n  useEffect(() => {\n    let cancelled = false;\n    let timeoutId: NodeJS.Timeout | null = null;\n    if (!token) {\n      const params = qs.parse(window.location.hash);\n      if (!params.access_token) {\n        const requestContents: ISpotifyTokenRequest = {\n          client_id: process.env.REACT_APP_CLIENT_ID || \"\",\n          redirect_uri: process.env.REACT_APP_REDIRECT_URI || \"\",\n          response_type: \"token\",\n          scopes: [\n            \"streaming\",\n            \"user-read-birthdate\",\n            \"user-read-email\",\n            \"user-read-private\"\n          ]\n        };\n        window.location.assign(generateSpotifyAuthUrl(requestContents));\n      } else {\n        // We know it is this type at this point so we cast to it\n        const spotifyResponse = (params as unknown) as ISpotifyTokenResponse;\n\n        // If the effect has not been cancelled we set the state\n        if (!cancelled) {\n          setToken(spotifyResponse.access_token);\n          timeoutId = setTimeout(\n            () => setToken(null),\n            Number(spotifyResponse.expires_in) * 1000\n          );\n        }\n        // Removes tokens from the url\n        window.location.hash = \"\";\n      }\n    }\n    return () => {\n      cancelled = true;\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    };\n  }, [token]);\n\n  const getFeatured = useCallback(async () => {\n    if (token) {\n      return await getUrl<ISpotifyFeatured>(\n        \"https://api.spotify.com/v1/browse/featured-playlists\",\n        token\n      );\n    }\n    return null;\n  }, [token]);\n\n  const getPlaylist = useCallback(async (url: string) => {\n    if (token) {\n      return await getUrl<ISpotifyPlaylistFull>(url, token);\n    }\n    return null;\n  }, [token]);\n\n  return (\n    <div>\n      <Featured getFeatured={getFeatured} getPlaylist={getPlaylist} />\n    </div>\n  );\n};\n\nexport default App;\n","import { ISpotifyTokenRequest } from \"interfaces/ISpotifyTokenRequest.interface\";\n\nexport const generateSpotifyAuthUrl = ({\n  client_id,\n  redirect_uri,\n  response_type,\n  scopes,\n  show_dialog,\n  state\n}: ISpotifyTokenRequest): string => {\n  // https://developer.spotify.com/documentation/general/guides/authorization-guide/\n  // Implicit flow\n  return `https://accounts.spotify.com/authorize?client_id=${client_id}&redirect_uri=${encodeURIComponent(\n    redirect_uri\n  )}&scope=${\n    scopes ? scopes.join(\" \") : \"\"\n  }&response_type=${response_type}&state=${state ? state : \"\"}&show_dialog=${\n    show_dialog ? show_dialog : \"false\"\n  }`;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.scss\";\nimport App from \"components/App/App.component\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Featured_container__3RrQr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cover\":\"Playlist_cover__3U_7L\"};"],"sourceRoot":""}