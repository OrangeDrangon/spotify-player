{"version":3,"sources":["components/Country/Country.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx","components/Country/Country.module.scss","components/App/App.module.scss"],"names":["Country","name","recovered","confirmed","deaths","rank","className","classes","country","data","col","fetchCountries","a","fetch","response","json","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","useSWR","revalidateOnFocus","countries","isValidating","Object","entries","filter","sort","map","index","key","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"4QAYO,SAASA,EAAT,GAAuE,IAApDC,EAAmD,EAAnDA,KAAMC,EAA6C,EAA7CA,UAAWC,EAAkC,EAAlCA,UAAWC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,KAC5D,OACE,yBAAKC,UAAWC,IAAQC,SACtB,4BACGH,EAAO,GAEV,4BAAKJ,GACL,yBAAKK,UAAWC,IAAQE,MACtB,yBAAKH,UAAWC,IAAQG,KACtB,8CACA,8CACA,4CAEF,yBAAKJ,UAAWC,IAAQG,KACtB,6BAAMR,GACN,6BAAMC,GACN,6BAAMC,M,6BCZDO,I,2EAAf,4BAAAC,EAAA,sEACyBC,MACrB,iEAFJ,cACQC,EADR,gBAIeA,EAASC,OAJxB,oF,sBCJA,IAAMC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MChGjEC,IAASC,OAAO,mBFeT,WAAgB,IAAD,EAC6BC,YAC/C,cACAjC,EACA,CAAEkC,mBAAmB,IAHTC,EADM,EACZrC,KAAiBgC,EADL,EACKA,MAAOM,EADZ,EACYA,aAKhC,OAAIN,GACFL,QAAQC,IAAII,GACL,uCAELM,EACK,2CAELD,EAEA,yBAAKxC,UAAWC,IAAQuC,WACrBE,OAAOC,QAAQH,GACbI,QAAO,oDAAsB/C,UAAY,KACzCgD,MAAK,qCAAMvC,GAAN,+CAAwBT,UAAYS,EAAET,aAC3CiD,KAAI,WAAeC,GAAf,uBAAEpD,EAAF,KAAQQ,EAAR,YACH,kBAACT,EAAD,eAASsD,IAAKrD,EAAMA,KAAMA,GAAUQ,EAApC,CAA0CJ,KAAMgD,SAKnD,mEExCO,MAASE,SAASC,eAAe,SDmB1C,SAAkBhC,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIgC,IACpBC,GACAxC,OAAOC,SAASwC,MAEJC,SAAW1C,OAAOC,SAASyC,OAIvC,OAGF1C,OAAO2C,iBAAiB,QAAQ,WAC9B,IAAMtC,EAAK,UAAMmC,GAAN,sBAEP1C,IAgEV,SAAiCO,EAAeC,GAE9CX,MAAMU,EAAO,CACXuC,QAAS,CAAE,iBAAkB,YAE5BlC,MAAK,SAAAd,GAEJ,IAAMiD,EAAcjD,EAASgD,QAAQE,IAAI,gBAEnB,MAApBlD,EAASmD,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CzC,UAAUC,cAAcyC,MAAMvC,MAAK,SAAAC,GACjCA,EAAauC,aAAaxC,MAAK,WAC7BV,OAAOC,SAASkD,eAKpB/C,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAiC,CAAwB/C,EAAOC,GAI/BC,UAAUC,cAAcyC,MAAMvC,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OC7C/BE,I,kBCZA6C,EAAOC,QAAU,CAAC,KAAO,sBAAsB,IAAM,qBAAqB,QAAU,2B,kBCApFD,EAAOC,QAAU,CAAC,UAAY,0B","file":"static/js/main.e3c1ea62.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport classes from \"./Country.module.scss\";\r\n\r\ninterface Props {\r\n  name: string;\r\n  recovered: number;\r\n  confirmed: number;\r\n  deaths: number;\r\n  rank: number;\r\n}\r\n\r\nexport function Country({ name, recovered, confirmed, deaths, rank }: Props) {\r\n  return (\r\n    <div className={classes.country}>\r\n      <h1>\r\n        {rank + 1}\r\n      </h1>\r\n      <h1>{name}</h1>\r\n      <div className={classes.data}>\r\n        <div className={classes.col}>\r\n          <strong>Recovered:</strong>\r\n          <strong>Confirmed:</strong>\r\n          <strong>Deaths:</strong>\r\n        </div>\r\n        <div className={classes.col}>\r\n          <div>{recovered}</div>\r\n          <div>{confirmed}</div>\r\n          <div>{deaths}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport useSWR from \"swr\";\nimport { Country } from \"../Country/Country\";\n\nimport classes from \"./App.module.scss\";\n\ninterface CountryData {\n  recovered: number;\n  confirmed: number;\n  deaths: number;\n}\n\ninterface Countries {\n  [key: string]: CountryData;\n}\n\nasync function fetchCountries(): Promise<Countries> {\n  const response = await fetch(\n    \"https://cors-anywhere.herokuapp.com/https://coronaapi.com/api\"\n  );\n  return await response.json();\n}\n\nexport function App() {\n  const { data: countries, error, isValidating } = useSWR(\n    \"countryData\",\n    fetchCountries,\n    { revalidateOnFocus: false }\n  );\n  if (error) {\n    console.log(error);\n    return <div>Error</div>;\n  }\n  if (isValidating) {\n    return <div>Loading...</div>;\n  }\n  if (countries) {\n    return (\n      <div className={classes.countries}>\n        {Object.entries(countries)\n          .filter(([key, data]) => data.confirmed > 0)\n          .sort(([ai, a], [bi, b]) => b.confirmed - a.confirmed)\n          .map(([name, data], index) => (\n            <Country key={name} name={name} {...data} rank={index} />\n          ))}\n      </div>\n    );\n  }\n  return <div>There is a catastrophic problem!</div>;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\n\nimport { App } from \"./components/App/App\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"data\":\"Country_data__t6RfA\",\"col\":\"Country_col__3GbBw\",\"country\":\"Country_country__218K_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"countries\":\"App_countries__1csOJ\"};"],"sourceRoot":""}