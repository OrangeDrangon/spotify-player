{"version":3,"sources":["constnants/headerCatagories.constant.ts","components/Header/Header.component.tsx","components/Playlist/Playlist.component.tsx","components/PlaylistList/PlaylistList.component.tsx","utils/getUrl.util.ts","components/App/App.component.tsx","utils/generateSpotifyAuthUrl.util.ts","serviceWorker.ts","index.tsx","components/Header/Header.module.scss","components/PlaylistList/PlaylistList.module.scss","components/Playlist/Playlist.module.scss"],"names":["headerCatagories","Header","_ref","setSelected","react_default","a","createElement","className","classes","header","onClick","Playlist","href","load","_useState","useState","_useState2","Object","slicedToArray","data","setData","getData","useCallback","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","abrupt","sent","stop","useEffect","cancelled","_callee2","unfiltered","dataNew","_context2","status","cover","style","backgroundImage","concat","images","url","console","log","Featured","getSimple","getFull","playlists","setPlaylists","featuredNew","container","items","map","playlist","Playlist_component","key","id","getUrl","_x","_x2","_getUrl","apply","this","arguments","token","response","json","fetch","method","headers","t0","App","setToken","_useState3","_useState4","selected","timeoutId","params","qs","parse","window","location","hash","access_token","spotifyResponse","setTimeout","Number","expires_in","assign","client_id","redirect_uri","response_type","scopes","show_dialog","state","encodeURIComponent","join","generateSpotifyAuthUrl","process","clearTimeout","getFeatured","getPlaylist","_ref2","getMyPlaylists","_callee3","_context3","Fragment","Header_component","display","PlaylistList_component","Boolean","hostname","match","ReactDOM","render","App_component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"mPAAaA,EACD,EADCA,EAED,kBCqBGC,EAbkB,SAAAC,GAA6B,IAA1BC,EAA0BD,EAA1BC,YAClC,OACEC,EAAAC,EAAAC,cAAA,UAAQC,UAAWC,IAAQC,QACzBL,EAAAC,EAAAC,cAAA,UAAQI,QAAS,kBAAMP,EAAYH,KAAnC,YAGAI,EAAAC,EAAAC,cAAA,UAAQI,QAAS,kBAAMP,EAAYH,KAAnC,8CCoCSW,EAxCoB,SAAAT,GAA4B,IAAzBU,EAAyBV,EAAzBU,KAAMC,EAAmBX,EAAnBW,KAAmBC,EACrCC,mBAAsC,MADDC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACtDK,EADsDH,EAAA,GAChDI,EADgDJ,EAAA,GAGvDK,EAAUC,sBAAWL,OAAAM,EAAA,EAAAN,CAAAO,EAAAnB,EAAAoB,KAAC,SAAAC,IAAA,OAAAF,EAAAnB,EAAAsB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACbjB,EAAKD,GADQ,cAAAgB,EAAAG,OAAA,SAAAH,EAAAI,MAAA,wBAAAJ,EAAAK,SAAAP,MAEzB,CAACd,EAAMC,IAoBV,OAlBAqB,oBAAU,WACR,IAAIC,GAAY,EAYhB,OAXAlB,OAAAM,EAAA,EAAAN,CAAAO,EAAAnB,EAAAoB,KAAC,SAAAW,IAAA,IAAAC,EAAAC,EAAA,OAAAd,EAAAnB,EAAAsB,KAAA,SAAAY,GAAA,cAAAA,EAAAV,KAAAU,EAAAT,MAAA,cAAAS,EAAAT,KAAA,EAC0BT,IAD1B,QACOgB,EADPE,EAAAP,QAGSK,EAA6BG,SAC3BF,EAAUD,EACXF,GACHf,EAAQkB,KANf,wBAAAC,EAAAN,SAAAG,KAADnB,GAWO,WACLkB,GAAY,IAEb,CAACd,IAGFjB,EAAAC,EAAAC,cAAA,OACEC,UAAWC,IAAQiC,MACnBC,MACEvB,EACI,CACEwB,gBAAe,OAAAC,OAASzB,EAAK0B,OAAO,GAAGC,IAAxB,MAEjB,GAENpC,QAAS,kBAAMqC,QAAQC,IAAI7B,OCOlB8B,EAjCoB,SAAA/C,GAAoC,IAAjCgD,EAAiChD,EAAjCgD,UAAWC,EAAsBjD,EAAtBiD,QAAsBrC,EACnCC,mBAExB,MAH2DC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC9DsC,EAD8DpC,EAAA,GACnDqC,EADmDrC,EAAA,GAwBrE,OAnBAkB,oBAAU,WACR,IAAIC,GAAY,EAchB,OAbAlB,OAAAM,EAAA,EAAAN,CAAAO,EAAAnB,EAAAoB,KAAC,SAAAC,IAAA,IAAAW,EAAAiB,EAAA,OAAA9B,EAAAnB,EAAAsB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAC0BoB,IAD1B,QACOb,EADPT,EAAAI,QAGSK,EAA6BG,SAC3Bc,EAAcjB,EAGfF,GACHkB,EAAaC,KARpB,wBAAA1B,EAAAK,SAAAP,KAADT,GAaO,WACLkB,GAAY,IAEb,CAACe,IAEF9C,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQ+C,YACpBH,EAAYA,EAAUI,MAAQ,IAAIC,IAAI,SAAAC,GAAQ,OAC9CtD,EAAAC,EAAAC,cAACqD,EAAD,CAAUC,IAAKF,EAASG,GAAIjD,KAAM8C,EAAS9C,KAAMC,KAAMsC,QC9CxD,SAAeW,EAAtBC,EAAAC,GAAA,OAAAC,EAAAC,MAAAC,KAAAC,sDAAO,SAAA1C,EACLoB,EACAuB,GAFK,IAAAC,EAAAC,EAAA,OAAA/C,EAAAnB,EAAAsB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WAIDuC,EAJC,CAAAzC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAMsB0C,MAAM1B,EAAK,CAChC2B,OAAQ,MACRC,QAAS,CAAC,CAAC,gBAAD,UAAA9B,OAA4ByB,OARvC,cAMKC,EANL1C,EAAAI,KAAAJ,EAAAE,KAAA,EAUkBwC,EAASC,OAV3B,cAUKA,EAVL3C,EAAAI,KAAAJ,EAAAG,OAAA,UAWMuC,EAAS9B,OAAkB+B,IAXjC,QAAA3C,EAAAC,KAAA,GAAAD,EAAA+C,GAAA/C,EAAA,SAaDmB,QAAQC,IAARpB,EAAA+C,IAbC,eAAA/C,EAAAG,OAAA,SAgBE,MAhBF,yBAAAH,EAAAK,SAAAP,EAAA,yCCwBP,IA8FekD,EA9FO,WAAM,IAAA9D,EACAC,mBAAgB,MADhBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACnBuD,EADmBrD,EAAA,GACZ6D,EADY7D,EAAA,GAAA8D,EAEM/D,mBAASf,GAFf+E,EAAA9D,OAAAC,EAAA,EAAAD,CAAA6D,EAAA,GAEnBE,EAFmBD,EAAA,GAET5E,EAFS4E,EAAA,GAI1B7C,oBAAU,WACR,IAAIC,GAAY,EACZ8C,EAAmC,KACvC,IAAKZ,EAAO,CACV,IAAMa,EAASC,IAAGC,MAAMC,OAAOC,SAASC,MACxC,GAAKL,EAAOM,aAcL,CAEL,IAAMC,EAAmBP,EAGpB/C,IACH0C,EAASY,EAAgBD,cACzBP,EAAYS,WACV,kBAAMb,EAAS,OACsB,IAArCc,OAAOF,EAAgBG,cAI3BP,OAAOC,SAASC,KAAO,QAdvBF,OAAOC,SAASO,OC9Cc,SAAA3F,GAOF,IANlC4F,EAMkC5F,EANlC4F,UACAC,EAKkC7F,EALlC6F,aACAC,EAIkC9F,EAJlC8F,cACAC,EAGkC/F,EAHlC+F,OACAC,EAEkChG,EAFlCgG,YACAC,EACkCjG,EADlCiG,MAIA,0DAAAvD,OAA2DkD,EAA3D,kBAAAlD,OAAqFwD,mBACnFL,GADF,WAAAnD,OAGEqD,EAASA,EAAOI,KAAK,KAAO,GAH9B,mBAAAzD,OAIkBoD,EAJlB,WAAApD,OAIyCuD,GAAgB,GAJzD,iBAAAvD,OAKEsD,GAA4B,SD+BDI,CAZuB,CAC5CR,UAAWS,mCACXR,aAAcQ,wBACdP,cAAe,QACfC,OAAQ,CACN,YACA,sBACA,kBACA,oBACA,4BAoBR,OAAO,WACL9D,GAAY,EACR8C,GACFuB,aAAavB,KAGhB,CAACZ,IAEJ,IAAMoC,EAAcnF,sBAAWL,OAAAM,EAAA,EAAAN,CAAAO,EAAAnB,EAAAoB,KAAC,SAAAC,IAAA,IAAA4C,EAAA,OAAA9C,EAAAnB,EAAAsB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACPgC,EACrB,uDACAO,GAH4B,cACxBC,EADwB1C,EAAAI,KAAAJ,EAAAG,OAAA,SAKvBuC,EACDA,EAA2B9B,OAE1B8B,EADAA,EAA8BlB,UAEjC,MAT0B,wBAAAxB,EAAAK,SAAAP,MAU7B,CAAC2C,IAEEqC,EAAcpF,sBAAW,eAAAqF,EAAA1F,OAAAM,EAAA,EAAAN,CAAAO,EAAAnB,EAAAoB,KAC7B,SAAAW,EAAOU,GAAP,OAAAtB,EAAAnB,EAAAsB,KAAA,SAAAY,GAAA,cAAAA,EAAAV,KAAAU,EAAAT,MAAA,cAAAS,EAAAT,KAAA,EACegC,EAA6BhB,EAAKuB,GADjD,cAAA9B,EAAAR,OAAA,SAAAQ,EAAAP,MAAA,wBAAAO,EAAAN,SAAAG,MAD6B,gBAAA2B,GAAA,OAAA4C,EAAAzC,MAAAC,KAAAC,YAAA,GAI7B,CAACC,IAGGuC,EAAiBtF,sBAAWL,OAAAM,EAAA,EAAAN,CAAAO,EAAAnB,EAAAoB,KAAC,SAAAoF,IAAA,OAAArF,EAAAnB,EAAAsB,KAAA,SAAAmF,GAAA,cAAAA,EAAAjF,KAAAiF,EAAAhF,MAAA,cAAAgF,EAAAhF,KAAA,EACpBgC,EACX,0CACAO,GAH+B,cAAAyC,EAAA/E,OAAA,SAAA+E,EAAA9E,MAAA,wBAAA8E,EAAA7E,SAAA4E,MAKhC,CAACxC,IAEJ,OACEjE,EAAAC,EAAAC,cAACF,EAAAC,EAAM0G,SAAP,KACE3G,EAAAC,EAAAC,cAAC0G,EAAD,CAAQ7G,YAAaA,IACrBC,EAAAC,EAAAC,cAAA,OACEoC,MACEsC,IAAahF,EAA4B,GAAK,CAAEiH,QAAS,SAG3D7G,EAAAC,EAAAC,cAAC4G,EAAD,CAAchE,UAAWuD,EAAatD,QAASuD,KAEjDtG,EAAAC,EAAAC,cAAA,OACEoC,MACEsC,IAAahF,EAA4B,GAAK,CAAEiH,QAAS,SAG3D7G,EAAAC,EAAAC,cAAC4G,EAAD,CAAchE,UAAW0D,EAAgBzD,QAASuD,OEtGtCS,QACW,cAA7B9B,OAAOC,SAAS8B,UAEe,UAA7B/B,OAAOC,SAAS8B,UAEhB/B,OAAOC,SAAS8B,SAASC,MACvB,2DCVNC,IAASC,OAAOnH,EAAAC,EAAAC,cAACkH,EAAD,MAASC,SAASC,eAAe,SDiI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCE1InBC,EAAAC,QAAA,CAAkBzH,OAAA,2CCAlBwH,EAAAC,QAAA,CAAkB3E,UAAA,oDCAlB0E,EAAAC,QAAA,CAAkBzF,MAAA","file":"static/js/main.e8a45a8a.chunk.js","sourcesContent":["export const headerCatagories: { [key: string]: number } = {\n  featured: 0,\n  personal: 1\n};\n","import React from \"react\";\n\nimport { headerCatagories } from \"constnants/headerCatagories.constant\";\n\nimport classes from \"./Header.module.scss\";\n\ninterface IProps {\n  setSelected: React.Dispatch<React.SetStateAction<number>>;\n}\n\nconst Header: React.FC<IProps> = ({ setSelected }: IProps) => {\n  return (\n    <header className={classes.header}>\n      <button onClick={() => setSelected(headerCatagories.featured)}>\n        Featured\n      </button>\n      <button onClick={() => setSelected(headerCatagories.personal)}>\n        Personal\n      </button>\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { useState, useEffect, useCallback } from \"react\";\n\nimport classes from \"./Playlist.module.scss\";\n\nimport { ISpotifyPlaylistFull } from \"interfaces/ISpotifyPlaylist.interface\";\nimport { ISpotifyError } from \"interfaces/ISpotifyError.interface\";\n\ninterface IProps {\n  href: string;\n  load: (url: string) => Promise<ISpotifyPlaylistFull | ISpotifyError | null>;\n}\n\nconst Playlist: React.FC<IProps> = ({ href, load }: IProps) => {\n  const [data, setData] = useState<ISpotifyPlaylistFull | null>(null);\n\n  const getData = useCallback(async () => {\n    return await load(href);\n  }, [href, load]);\n\n  useEffect(() => {\n    let cancelled = false;\n    (async () => {\n      const unfiltered = await getData();\n      if (unfiltered) {\n        if (!(unfiltered as ISpotifyError).status) {\n          const dataNew = unfiltered as ISpotifyPlaylistFull;\n          if (!cancelled) {\n            setData(dataNew);\n          }\n        }\n      }\n    })();\n    return () => {\n      cancelled = true;\n    };\n  }, [getData]);\n\n  return (\n    <div\n      className={classes.cover}\n      style={\n        data\n          ? {\n              backgroundImage: `url(${data.images[0].url})`\n            }\n          : {}\n      }\n      onClick={() => console.log(data)}\n    />\n  );\n};\n\nexport default Playlist;\n","import React, { useState, useEffect } from \"react\";\n\nimport classes from \"./PlaylistList.module.scss\";\nimport Playlist from \"components/Playlist/Playlist.component\";\n\nimport { ISpotifyError } from \"interfaces/ISpotifyError.interface\";\nimport {\n  ISpotifyPlaylistFull,\n  ISpotifyPlaylistSimple\n} from \"interfaces/ISpotifyPlaylist.interface\";\nimport { ISpotifyPaging } from \"interfaces/ISpotifyPaging.interface\";\n\ninterface IProps {\n  getSimple: () => Promise<\n    ISpotifyPaging<ISpotifyPlaylistSimple[]> | ISpotifyError | null\n  >;\n  getFull: (\n    url: string\n  ) => Promise<ISpotifyPlaylistFull | ISpotifyError | null>;\n}\n\nconst Featured: React.FC<IProps> = ({ getSimple, getFull }: IProps) => {\n  const [playlists, setPlaylists] = useState<ISpotifyPaging<\n    ISpotifyPlaylistSimple[]\n  > | null>(null);\n\n  useEffect(() => {\n    let cancelled = false;\n    (async () => {\n      const unfiltered = await getSimple();\n      if (unfiltered) {\n        if (!(unfiltered as ISpotifyError).status) {\n          const featuredNew = unfiltered as ISpotifyPaging<\n            ISpotifyPlaylistSimple[]\n          >;\n          if (!cancelled) {\n            setPlaylists(featuredNew);\n          }\n        }\n      }\n    })();\n    return () => {\n      cancelled = true;\n    };\n  }, [getSimple]);\n  return (\n    <div className={classes.container}>\n      {(playlists ? playlists.items : []).map(playlist => (\n        <Playlist key={playlist.id} href={playlist.href} load={getFull} />\n      ))}\n    </div>\n  );\n};\n\nexport default Featured;\n","import { ISpotifyError } from \"interfaces/ISpotifyError.interface\";\n\nexport async function getUrl<T>(\n  url: string,\n  token: string | null\n): Promise<T | ISpotifyError | null> {\n  if (token) {\n    try {\n      const response = await fetch(url, {\n        method: \"GET\",\n        headers: [[\"Authorization\", `Bearer ${token}`]]\n      });\n      const json = await response.json();\n      return response.status === 200 ? (json as T) : (json as ISpotifyError);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  return null;\n}\n","import React, { useState, useEffect, useCallback } from \"react\";\n\nimport qs from \"query-string\";\n\n// import classes from \"./App.module.scss\";\n\nimport Header from \"components/Header/Header.component\";\nimport PlaylistList from \"components/PlaylistList/PlaylistList.component\";\n\nimport { ISpotifyTokenRequest } from \"interfaces/ISpotifyTokenRequest.interface\";\nimport { ISpotifyTokenResponse } from \"interfaces/ISpotifyTokenResponse.interface\";\nimport { ISpotifyFeatured } from \"interfaces/ISpotifyFeatured.interface\";\nimport {\n  ISpotifyPlaylistFull,\n  ISpotifyPlaylistSimple\n} from \"interfaces/ISpotifyPlaylist.interface\";\n\nimport { generateSpotifyAuthUrl } from \"utils/generateSpotifyAuthUrl.util\";\nimport { getUrl } from \"utils/getUrl.util\";\nimport { ISpotifyPaging } from \"interfaces/ISpotifyPaging.interface\";\nimport { ISpotifyError } from \"interfaces/ISpotifyError.interface\";\n\nimport { headerCatagories } from \"constnants/headerCatagories.constant\";\n\ntype Token = string | null;\n\nconst App: React.FC = () => {\n  const [token, setToken] = useState<Token>(null);\n  const [selected, setSelected] = useState(headerCatagories.featured);\n\n  useEffect(() => {\n    let cancelled = false;\n    let timeoutId: NodeJS.Timeout | null = null;\n    if (!token) {\n      const params = qs.parse(window.location.hash);\n      if (!params.access_token) {\n        const requestContents: ISpotifyTokenRequest = {\n          client_id: process.env.REACT_APP_CLIENT_ID || \"\",\n          redirect_uri: process.env.REACT_APP_REDIRECT_URI || \"\",\n          response_type: \"token\",\n          scopes: [\n            \"streaming\",\n            \"user-read-birthdate\",\n            \"user-read-email\",\n            \"user-read-private\",\n            \"playlist-read-private\"\n          ]\n        };\n        window.location.assign(generateSpotifyAuthUrl(requestContents));\n      } else {\n        // We know it is this type at this point so we cast to it\n        const spotifyResponse = (params as unknown) as ISpotifyTokenResponse;\n\n        // If the effect has not been cancelled we set the state\n        if (!cancelled) {\n          setToken(spotifyResponse.access_token);\n          timeoutId = setTimeout(\n            () => setToken(null),\n            Number(spotifyResponse.expires_in) * 1000\n          );\n        }\n        // Removes tokens from the url\n        window.location.hash = \"\";\n      }\n    }\n    return () => {\n      cancelled = true;\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    };\n  }, [token]);\n\n  const getFeatured = useCallback(async () => {\n    const response = await getUrl<ISpotifyFeatured>(\n      \"https://api.spotify.com/v1/browse/featured-playlists\",\n      token\n    );\n    return response\n      ? !(response as ISpotifyError).status\n        ? (response as ISpotifyFeatured).playlists\n        : (response as ISpotifyError)\n      : null;\n  }, [token]);\n\n  const getPlaylist = useCallback(\n    async (url: string) => {\n      return await getUrl<ISpotifyPlaylistFull>(url, token);\n    },\n    [token]\n  );\n\n  const getMyPlaylists = useCallback(async () => {\n    return await getUrl<ISpotifyPaging<ISpotifyPlaylistSimple[]>>(\n      \"https://api.spotify.com/v1/me/playlists\",\n      token\n    );\n  }, [token]);\n\n  return (\n    <React.Fragment>\n      <Header setSelected={setSelected} />\n      <div\n        style={\n          selected === headerCatagories.featured ? {} : { display: \"none\" }\n        }\n      >\n        <PlaylistList getSimple={getFeatured} getFull={getPlaylist} />\n      </div>\n      <div\n        style={\n          selected === headerCatagories.personal ? {} : { display: \"none\" }\n        }\n      >\n        <PlaylistList getSimple={getMyPlaylists} getFull={getPlaylist} />\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import { ISpotifyTokenRequest } from \"interfaces/ISpotifyTokenRequest.interface\";\n\nexport const generateSpotifyAuthUrl = ({\n  client_id,\n  redirect_uri,\n  response_type,\n  scopes,\n  show_dialog,\n  state\n}: ISpotifyTokenRequest): string => {\n  // https://developer.spotify.com/documentation/general/guides/authorization-guide/\n  // Implicit flow\n  return `https://accounts.spotify.com/authorize?client_id=${client_id}&redirect_uri=${encodeURIComponent(\n    redirect_uri\n  )}&scope=${\n    scopes ? scopes.join(\" \") : \"\"\n  }&response_type=${response_type}&state=${state ? state : \"\"}&show_dialog=${\n    show_dialog ? show_dialog : \"false\"\n  }`;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.scss\";\nimport App from \"components/App/App.component\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2kr8J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PlaylistList_container__2Wtta\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cover\":\"Playlist_cover__3U_7L\"};"],"sourceRoot":""}