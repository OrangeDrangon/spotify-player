{"version":3,"sources":["components/App/App.module.scss","components/Header/Header.module.scss","components/PlaylistList/PlaylistList.module.scss","assets/icons/close.svg","components/Card/Card.module.scss","components/Modal/Modal.module.scss","components/Playlist/Playlist.module.scss","constants/headerCatagories.constant.ts","components/Header/Header.component.tsx","utils/getUrl.util.ts","components/Card/Card.component.tsx","components/Modal/Modal.component.tsx","components/Playlist/Playlist.component.tsx","utils/htmlDecode.util.ts","components/PlaylistList/PlaylistList.component.tsx","components/Personal/Personal.component.tsx","components/Featured/Featured.component.tsx","components/App/App.component.tsx","redux/actions/setToken.action.ts","redux/constants/setToken.constant.ts","utils/generateSpotifyAuthUrl.util.ts","redux/reducers/root.reducer.ts","redux/store.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","page","section","header","button","container","__webpack_require__","p","backdrop","cover","card","close","title","description","createdBy","author","headerCatagories","Header","_ref","setSelected","react_default","a","createElement","className","classes","onClick","getUrl","_x","_x2","_getUrl","apply","this","arguments","_callee","url","token","response","json","regenerator_default","wrap","_context","prev","next","fetch","method","headers","concat","sent","abrupt","status","t0","console","log","stop","Card","children","containerClass","Modal","open","onBackdropClick","_ref2","target","currentTarget","style","display","Playlist","connect","_ref4","input","href","_useState","useState","_useState2","Object","slicedToArray","data","setData","_useState3","_useState4","setOpen","getData","useCallback","asyncToGenerator","mark","useEffect","cancelled","_callee2","unfiltered","dataNew","_context2","Fragment","backgroundImage","images","Modal_component","Card_component","src","alt","name","owner","display_name","DOMParser","parseFromString","documentElement","textContent","PlaylistList","getSimple","playlists","setPlaylists","featuredNew","items","map","playlist","Playlist_component","key","id","Personal","_ref3","getPlaylistList","PlaylistList_component","Featured","getFeatured","App","dispatch","setToken","type","payload","selected","timeoutId","params","qs","parse","window","location","hash","access_token","spotifyResponse","setTimeout","Number","expires_in","assign","client_id","redirect_uri","response_type","scopes","show_dialog","state","encodeURIComponent","join","generateSpotifyAuthUrl","process","clearTimeout","Header_component","Featured_component","Personal_component","initialState","store","createStore","length","undefined","action","objectSpread","Boolean","hostname","match","ReactDOM","render","es","App_component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bd40b35c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"App_page__14G2o\",\"section\":\"App_section__1vvt6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2kr8J\",\"button\":\"Header_button__w7eHc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PlaylistList_container__2Wtta\"};","module.exports = __webpack_public_path__ + \"static/media/close.84e833e5.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Card_container__M67NJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Modal_backdrop__3VE3C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cover\":\"Playlist_cover__3U_7L\",\"card\":\"Playlist_card__3OMCF\",\"close\":\"Playlist_close__3n1DV\",\"header\":\"Playlist_header__3XXLq\",\"title\":\"Playlist_title__3Fedx\",\"description\":\"Playlist_description__2WzFR\",\"createdBy\":\"Playlist_createdBy__3_wWb\",\"author\":\"Playlist_author__27M0k\"};","export const headerCatagories: { [key: string]: number } = {\n  featured: 0,\n  personal: 1\n};\n","import React from \"react\";\n\nimport { headerCatagories } from \"constants/headerCatagories.constant\";\n\nimport classes from \"./Header.module.scss\";\n\ninterface IProps {\n  setSelected: React.Dispatch<React.SetStateAction<number>>;\n}\n\nconst Header: React.FC<IProps> = ({ setSelected }: IProps) => {\n  return (\n    <header className={classes.header}>\n      <button\n        className={classes.button}\n        onClick={() => setSelected(headerCatagories.featured)}\n      >\n        Featured\n      </button>\n      <button\n        className={classes.button}\n        onClick={() => setSelected(headerCatagories.personal)}\n      >\n        Personal\n      </button>\n    </header>\n  );\n};\n\nexport default Header;\n","import { ISpotifyError } from \"interfaces/ISpotifyError.interface\";\n\nexport async function getUrl<T>(\n  url: string,\n  token: string | null\n): Promise<T | ISpotifyError | null> {\n  if (token) {\n    try {\n      const response = await fetch(url, {\n        method: \"GET\",\n        headers: [[\"Authorization\", `Bearer ${token}`]]\n      });\n      const json = await response.json();\n      return response.status === 200 ? (json as T) : (json as ISpotifyError);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  return null;\n}\n","import React from \"react\";\n\nimport classes from \"./Card.module.scss\";\n\ninterface IProps {\n  children: React.ReactNode;\n  containerClass?: string;\n}\n\nconst Card: React.FC<IProps> = ({ children, containerClass }: IProps) => {\n  return (\n    <div\n      className={`${classes.container} ${containerClass ? containerClass : \"\"}`}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\n\nimport classes from \"./Modal.module.scss\";\n\ninterface IProps {\n  children: React.ReactNode;\n  open: boolean;\n  onBackdropClick: () => void;\n}\n\nconst Modal: React.FC<IProps> = ({\n  children,\n  open,\n  onBackdropClick\n}: IProps) => {\n  return (\n    <div\n      className={classes.backdrop}\n      onClick={({ target, currentTarget }) => {\n        if (target === currentTarget) {\n          onBackdropClick();\n        }\n      }}\n      style={open ? {} : { display: \"none\" }}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default Modal;\n","/* eslint-disable jsx-a11y/heading-has-content */\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport classes from \"./Playlist.module.scss\";\n\nimport close from \"assets/icons/close.svg\";\n\nimport Card from \"components/Card/Card.component\";\nimport Modal from \"components/Modal/Modal.component\";\n\nimport { ISpotifyPlaylistFull } from \"interfaces/ISpotifyPlaylist.interface\";\nimport { ISpotifyError } from \"interfaces/ISpotifyError.interface\";\n\nimport { htmlDecode } from \"utils/htmlDecode.util\";\nimport { getUrl } from \"utils/getUrl.util\";\n\nimport { IState } from \"redux/reducers/root.reducer\";\n\ninterface IProps {\n  href: string;\n  token: string | null;\n}\n\nconst ConnectedPlaylist: React.FC<IProps> = ({ href, token }: IProps) => {\n  const [data, setData] = useState<ISpotifyPlaylistFull | null>(null);\n  const [open, setOpen] = useState(false);\n\n  const getData = useCallback(async () => {\n    return await getUrl<ISpotifyPlaylistFull>(href, token);\n  }, [href, token]);\n\n  useEffect(() => {\n    let cancelled = false;\n    (async () => {\n      const unfiltered = await getData();\n      if (unfiltered) {\n        if (!(unfiltered as ISpotifyError).status) {\n          const dataNew = unfiltered as ISpotifyPlaylistFull;\n          if (!cancelled) {\n            setData(dataNew);\n          }\n        }\n      }\n    })();\n    return () => {\n      cancelled = true;\n    };\n  }, [getData]);\n\n  return (\n    <React.Fragment>\n      <div\n        className={classes.cover}\n        onClick={() => setOpen(true)}\n        style={\n          data\n            ? {\n                backgroundImage: `url(${data.images[0].url})`\n              }\n            : {}\n        }\n      />\n      <Modal open={open} onBackdropClick={() => setOpen(false)}>\n        <Card containerClass={classes.card}>\n          <img\n            src={close}\n            alt=\"\"\n            className={classes.close}\n            onClick={() => setOpen(false)}\n          />\n          {data ? (\n            <React.Fragment>\n              <header className={classes.header}>\n                <h1 className={classes.title}>{data.name}</h1>\n                <div className={classes.createdBy}>\n                  Created by{\" \"}\n                  <span className={classes.author}>\n                    {data.owner.display_name}\n                  </span>\n                </div>\n                <div className={classes.description}>\n                  {htmlDecode(data.description ? data.description : \"\")}\n                </div>\n              </header>\n            </React.Fragment>\n          ) : (\n            \"Loading...\"\n          )}\n        </Card>\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nconst mapStateToProps = ({ token }: IState) => {\n  return { token };\n};\n\nconst Playlist = connect(mapStateToProps)(ConnectedPlaylist);\n\nexport default Playlist;\n","export const htmlDecode = (input: string) => {\n  const doc = new DOMParser().parseFromString(input, \"text/html\");\n  return doc.documentElement.textContent;\n};\n","import React, { useState, useEffect } from \"react\";\n\nimport classes from \"./PlaylistList.module.scss\";\nimport Playlist from \"components/Playlist/Playlist.component\";\n\nimport { ISpotifyError } from \"interfaces/ISpotifyError.interface\";\nimport { ISpotifyPlaylistSimple } from \"interfaces/ISpotifyPlaylist.interface\";\nimport { ISpotifyPaging } from \"interfaces/ISpotifyPaging.interface\";\n\ninterface IProps {\n  getSimple: () => Promise<\n    ISpotifyPaging<ISpotifyPlaylistSimple[]> | ISpotifyError | null\n  >;\n}\n\nconst PlaylistList: React.FC<IProps> = ({ getSimple }: IProps) => {\n  const [playlists, setPlaylists] = useState<ISpotifyPaging<\n    ISpotifyPlaylistSimple[]\n  > | null>(null);\n\n  useEffect(() => {\n    let cancelled = false;\n    (async () => {\n      const unfiltered = await getSimple();\n      if (unfiltered) {\n        if (!(unfiltered as ISpotifyError).status) {\n          const featuredNew = unfiltered as ISpotifyPaging<\n            ISpotifyPlaylistSimple[]\n          >;\n          if (!cancelled) {\n            setPlaylists(featuredNew);\n          }\n        }\n      }\n    })();\n    return () => {\n      cancelled = true;\n    };\n  }, [getSimple]);\n  return (\n    <div className={classes.container}>\n      {(playlists ? playlists.items : []).map(playlist => (\n        <Playlist key={playlist.id} href={playlist.href} />\n      ))}\n    </div>\n  );\n};\n\nexport default PlaylistList;\n","import React, { useCallback } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { getUrl } from \"utils/getUrl.util\";\n\nimport PlaylistList from \"components/PlaylistList/PlaylistList.component\";\n\nimport { IState } from \"redux/reducers/root.reducer\";\n\nimport { ISpotifyPaging } from \"interfaces/ISpotifyPaging.interface\";\nimport { ISpotifyPlaylistSimple } from \"interfaces/ISpotifyPlaylist.interface\";\n\ninterface IProps {\n  token: string | null;\n}\n\nconst PersonalConnected: React.FC<IProps> = ({ token }: IProps) => {\n  const getPlaylistList = useCallback(async () => {\n    return await getUrl<ISpotifyPaging<ISpotifyPlaylistSimple[]>>(\n      \"https://api.spotify.com/v1/me/playlists\",\n      token\n    );\n  }, [token]);\n  return <PlaylistList getSimple={getPlaylistList} />;\n};\n\nconst mapStateToProps = ({ token }: IState) => {\n  return { token };\n};\n\nconst Personal = connect(mapStateToProps)(PersonalConnected);\n\nexport default Personal;\n","import React, { useCallback } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { getUrl } from \"utils/getUrl.util\";\n\nimport PlaylistList from \"components/PlaylistList/PlaylistList.component\";\n\nimport { IState } from \"redux/reducers/root.reducer\";\n\nimport { ISpotifyFeatured } from \"interfaces/ISpotifyFeatured.interface\";\nimport { ISpotifyError } from \"interfaces/ISpotifyError.interface\";\n\ninterface IProps {\n  token: string | null;\n}\n\nconst FeaturedConnected: React.FC<IProps> = ({ token }: IProps) => {\n  const getFeatured = useCallback(async () => {\n    const response = await getUrl<ISpotifyFeatured>(\n      \"https://api.spotify.com/v1/browse/featured-playlists\",\n      token\n    );\n    return response\n      ? !(response as ISpotifyError).status\n        ? (response as ISpotifyFeatured).playlists\n        : (response as ISpotifyError)\n      : null;\n  }, [token]);\n\n  return <PlaylistList getSimple={getFeatured} />;\n};\n\nconst mapStateToProps = ({ token }: IState) => {\n  return { token };\n};\n\nconst Featured = connect(mapStateToProps)(FeaturedConnected);\n\nexport default Featured;\n","import React, { useState, useEffect } from \"react\";\nimport qs from \"query-string\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\n\nimport classes from \"./App.module.scss\";\n\nimport Header from \"components/Header/Header.component\";\nimport Personal from \"components/Personal/Personal.component\";\nimport Featured from \"components/Featured/Featured.component\";\n\nimport { ISpotifyTokenRequest } from \"interfaces/ISpotifyTokenRequest.interface\";\nimport { ISpotifyTokenResponse } from \"interfaces/ISpotifyTokenResponse.interface\";\n\nimport { generateSpotifyAuthUrl } from \"utils/generateSpotifyAuthUrl.util\";\n\nimport { headerCatagories } from \"constants/headerCatagories.constant\";\n\nimport { IState } from \"redux/reducers/root.reducer\";\nimport { setToken } from \"redux/actions/setToken.action\";\n\ninterface IProps {\n  token: string | null;\n  setToken: (\n    token: string | null\n  ) => {\n    type: string;\n    payload: string | null;\n  };\n}\n\nconst ConnectedApp: React.FC<IProps> = ({ token, setToken }: IProps) => {\n  const [selected, setSelected] = useState(headerCatagories.featured);\n\n  useEffect(() => {\n    let cancelled = false;\n    let timeoutId: NodeJS.Timeout | null = null;\n    if (!token) {\n      const params = qs.parse(window.location.hash);\n      if (!params.access_token) {\n        const requestContents: ISpotifyTokenRequest = {\n          client_id: process.env.REACT_APP_CLIENT_ID || \"\",\n          redirect_uri: process.env.REACT_APP_REDIRECT_URI || \"\",\n          response_type: \"token\",\n          scopes: [\n            \"streaming\",\n            \"user-read-birthdate\",\n            \"user-read-email\",\n            \"user-read-private\",\n            \"playlist-read-private\"\n          ]\n        };\n        window.location.assign(generateSpotifyAuthUrl(requestContents));\n      } else {\n        // We know it is this type at this point so we cast to it\n        const spotifyResponse = (params as unknown) as ISpotifyTokenResponse;\n\n        // If the effect has not been cancelled we set the state\n        if (!cancelled) {\n          setToken(spotifyResponse.access_token);\n          timeoutId = setTimeout(\n            () => setToken(null),\n            Number(spotifyResponse.expires_in) * 1000\n          );\n        }\n        // Removes tokens from the url\n        window.location.hash = \"\";\n      }\n    }\n    return () => {\n      cancelled = true;\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    };\n  }, [token, setToken]);\n\n  return (\n    <React.Fragment>\n      <Header setSelected={setSelected} />\n      <div className={classes.page}>\n        <section\n          className={classes.section}\n          style={\n            selected === headerCatagories.featured ? {} : { display: \"none\" }\n          }\n        >\n          <Featured />\n        </section>\n        <section\n          className={classes.section}\n          style={\n            selected === headerCatagories.personal ? {} : { display: \"none\" }\n          }\n        >\n          <Personal />\n        </section>\n      </div>\n    </React.Fragment>\n  );\n};\n\nconst mapStateToProps = ({ token }: IState) => {\n  return { token };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return { setToken: (token: string | null) => dispatch(setToken(token)) };\n};\n\nconst App = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ConnectedApp);\n\nexport default App;\n","import { SET_TOKEN } from \"redux/constants/setToken.constant\";\n\nexport const setToken = (payload: string | null) => {\n  return { type: SET_TOKEN, payload };\n};\n","export const SET_TOKEN = \"setToken\";\n","import { ISpotifyTokenRequest } from \"interfaces/ISpotifyTokenRequest.interface\";\n\nexport const generateSpotifyAuthUrl = ({\n  client_id,\n  redirect_uri,\n  response_type,\n  scopes,\n  show_dialog,\n  state\n}: ISpotifyTokenRequest): string => {\n  // https://developer.spotify.com/documentation/general/guides/authorization-guide/\n  // Implicit flow\n  return `https://accounts.spotify.com/authorize?client_id=${client_id}&redirect_uri=${encodeURIComponent(\n    redirect_uri\n  )}&scope=${\n    scopes ? scopes.join(\" \") : \"\"\n  }&response_type=${response_type}&state=${state ? state : \"\"}&show_dialog=${\n    show_dialog ? show_dialog : \"false\"\n  }`;\n};\n","import { SET_TOKEN } from \"redux/constants/setToken.constant\";\n\nexport interface IState {\n  token: string | null;\n}\n\ninterface IAction {\n  type: string;\n  payload: any;\n}\n\nconst initialState: IState = {\n  token: null\n};\n\nexport const rootReducer = (state = initialState, action: IAction) => {\n  if (action.type === SET_TOKEN) {\n    return { ...state, token: action.payload };\n  }\n  return state;\n};\n","import { createStore } from \"redux\";\n\nimport { rootReducer } from \"./reducers/root.reducer\";\n\nconst store = createStore(rootReducer);\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport \"./index.scss\";\n\nimport App from \"components/App/App.component\";\n\nimport store from \"redux/store\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}